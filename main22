import logging
import time
import MetaTrader5 as mt5
import pandas as pd
import numpy as np
from credenciales import *
from exness import *
from porcentaje_capital import *
from tipo_de_operacion import *
from ganacias_perdidas import *
import getpass
import signal
from datetime import datetime, timedelta
import MetaTrader5 as mt5
import pandas as pd
import numpy as np
import logging








# Configuración de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')


def cerrar_conexion(sig, frame):
    """Manejador de la señal Ctrl + C para cerrar la conexión correctamente."""
    logging.info("\nCerrando conexión con MT5...")
    mt5.shutdown()  # Cerrar MT5 de manera segura
    logging.info("Conexión cerrada.")
    exit(0)  # Salir del programa


# Registrar el manejador de la señal Ctrl + C
signal.signal(signal.SIGINT, cerrar_conexion)


def connect_to_mt5():
    """Solicita credenciales al usuario y establece conexión con MetaTrader 5."""
    try:
        cuenta = int(input("Introduce tu número de cuenta: "))
        servidor = input("Introduce el nombre del servidor: ")
        contraseña = getpass.getpass("Introduce tu contraseña: ")  # Ocultar la contraseña
    except ValueError:
        logging.error("El número de cuenta debe ser un número entero.")
        return False

    # Inicializar MT5
    if not mt5.initialize():
        logging.error("Error al inicializar MT5: %s", mt5.last_error())
        return False

    # Iniciar sesión
    if not mt5.login(cuenta, password=contraseña, server=servidor):
        logging.error("Error al iniciar sesión: %s", mt5.last_error())
        mt5.shutdown()
        return False

    logging.info("Conexión exitosa a MT5.")
    return True






logging.basicConfig(level=logging.ERROR)

def get_account_equity():
    """
    Obtiene el balance y el margen libre de la cuenta.
    """
    # Obtiene la información de la cuenta
    account_info = mt5.account_info()
    if account_info is None:
        print("No se pudo obtener la información de la cuenta.")
        return None

    # Extrae el balance y el margen libre
    balance = account_info.balance
    free_margin = account_info.margin_free

    # Imprime los valores obtenidos en una sola línea
    print(f"Balance: {balance}, Margen libre: {free_margin}")

    # Retorna solo los valores como un diccionario sin mostrarlo
    return balance, free_margin







def calculate_risk_and_capital_distribution(symbols, free_margin):
    """
    Calcula el riesgo y distribuye el capital basado en el margen libre y el porcentaje definido por el usuario.
    
    Args:
        symbols (list): Lista de símbolos financieros.
        free_margin (float): Margen libre de la cuenta.
    
    Returns:
        dict: Un diccionario con la distribución de capital para cada símbolo.
    """
    if free_margin is None or free_margin <= 0:
        logging.error("El margen libre no es válido o es insuficiente.")
        return None

    try:
        # Solicitar al usuario el porcentaje del margen libre para asignar
        risk_percentage = float(input("Introduce el porcentaje del margen libre para asignar a los símbolos (0-100): "))
        if not 0 <= risk_percentage <= 100:
            logging.error("El porcentaje debe estar entre 0 y 100.")
            return None
    except ValueError:
        logging.error("Por favor, introduce un número válido.")
        return None

    # Calcular el capital por cada símbolo
    number_of_symbols = len(symbols)
    if number_of_symbols == 0:
        logging.error("La lista de símbolos está vacía.")
        return None

    capital_per_symbol = (free_margin * risk_percentage / 100) / number_of_symbols
    logging.info(f"El capital asignado a cada símbolo será: {capital_per_symbol:.2f}")

    # Crear un diccionario con el capital para cada símbolo
    capital_distribution = {symbol: capital_per_symbol for symbol in symbols}
    return capital_distribution






import MetaTrader5 as mt5
import pandas as pd
import numpy as np
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

def fetch_market_data(symbol, timeframe, limit=10, interval=5, analyze=False):
    """
    Obtiene datos de mercado desde MT5 y realiza análisis en tiempo real si se habilita.
    
    :param symbol: El símbolo del instrumento financiero (e.g., 'EURUSD').
    :param timeframe: El marco temporal (e.g., mt5.TIMEFRAME_M1).
    :param limit: Número de barras a obtener.
    :param interval: Intervalo en segundos entre actualizaciones.
    :param analyze: Si True, realiza análisis en tiempo real.
    :return: DataFrame con los datos de mercado si analyze=False. Ninguno en modo de análisis.
    """
    if analyze:
        logging.info(f"Iniciando análisis en tiempo real para {symbol}. Presiona Ctrl+C para detener.")
        try:
            while True:
                rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, limit)
                if rates is None:
                    logging.error(f"Error al obtener datos para {symbol}: {mt5.last_error()}")
                else:
                    df = pd.DataFrame(rates)
                    df['time'] = pd.to_datetime(df['time'], unit='s')
                    
                    # Aquí se puede realizar análisis con los datos obtenidos.
                    logging.info(f"Últimos datos para {symbol}:\n{df}")
                
                time.sleep(interval)  # Pausa entre actualizaciones.
        except KeyboardInterrupt:
            logging.info("Análisis en tiempo real detenido por el usuario.")
        except Exception as e:
            logging.error(f"Se produjo un error: {e}")
        finally:
            logging.info("Cerrando análisis.")
    else:
        rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, limit)
        if rates is None:
            logging.error(f"Error al obtener datos para {symbol}: {mt5.last_error()}")
            return None
        
        df = pd.DataFrame(rates)
        df['time'] = pd.to_datetime(df['time'], unit='s')
        return df

# Función para calcular indicadores
def calculate_indicators(df):
    """Calcula indicadores optimizados para scalping (sin TA-Lib)."""
    # Bollinger Bands
    df['sma'] = df['close'].rolling(window=5).mean()
    df['std'] = df['close'].rolling(window=5).std()
    df['upper_band'] = df['sma'] + (df['std'] * 2)
    df['lower_band'] = df['sma'] - (df['std'] * 2)

    # Chaikin Volatility
    df['high_low_diff'] = df['high'] - df['low']
    df['chaikin_volatility'] = df['high_low_diff'].ewm(span=3, adjust=False).mean().diff()

    # ATR (Average True Range)
    df['tr'] = df[['high', 'low', 'close']].apply(
        lambda row: max(row['high'] - row['low'], 
                        abs(row['high'] - row['close']), 
                        abs(row['low'] - row['close'])), axis=1
    )
    df['atr'] = df['tr'].rolling(window=7).mean()

    # RSI (Relative Strength Index)
    delta = df['close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=7).mean()
    avg_loss = loss.rolling(window=7).mean()
    rs = avg_gain / avg_loss
    df['rsi'] = 100 - (100 / (1 + rs))

    # MACD
    short_ema = df['close'].ewm(span=12, adjust=False).mean()
    long_ema = df['close'].ewm(span=26, adjust=False).mean()
    df['macd'] = short_ema - long_ema
    df['macd_signal'] = df['macd'].ewm(span=9, adjust=False).mean()
    df['macd_hist'] = df['macd'] - df['macd_signal']

    # Stochastic Oscillator
    df['slowk'] = ((df['close'] - df['low'].rolling(window=14).min()) / 
                   (df['high'].rolling(window=14).max() - df['low'].rolling(window=14).min())) * 100
    df['slowd'] = df['slowk'].rolling(window=3).mean()

    df.fillna(0, inplace=True)
    return df

# Función para generar señales
def generate_signal(symbol, timeframe, limit=10):
    """Genera señales de compra/venta basadas en indicadores calculados manualmente."""
    df = fetch_market_data(symbol, timeframe, limit)
    if df is None or df.empty:
        return None

    df = calculate_indicators(df)
    last_row = df.iloc[-1]

    buy_conditions = 0
    sell_conditions = 0

    # Condiciones para compra
    if last_row['close'] < last_row['lower_band']:
        buy_conditions += 1
    if last_row['rsi'] < 30:
        buy_conditions += 1
    if last_row['atr'] > df['atr'].mean():
        buy_conditions += 1

    # Condiciones para venta
    if last_row['close'] > last_row['upper_band']:
        sell_conditions += 1
    if last_row['rsi'] > 70:
        sell_conditions += 1
    if last_row['atr'] > df['atr'].mean():
        sell_conditions += 1

    if buy_conditions >= 2:
        return 'buy'
    elif sell_conditions >= 2:
        return 'sell'
    return 'hold'









def execute_trade(latest_signal, symbol, capital_assigned, risk_per_trade=0.5):
    """Ejecuta operaciones rápidas para scalping."""
    order_type = 0 if latest_signal == 'buy' else 1 if latest_signal == 'sell' else None
    if order_type is None:
        print("No se ejecutó ninguna operación. Señal inválida.")
        return None

    symbol_info = mt5.symbol_info(symbol)
    if not symbol_info:
        print(f"Error: Información no encontrada para el símbolo {symbol}.")
        return None

    # Validar si 'capital_assigned' es un diccionario
    if isinstance(capital_assigned, dict):
        # Extraer el capital asignado para el símbolo actual
        if symbol in capital_assigned:
            capital_assigned = capital_assigned[symbol]
        else:
            print(f"Error: No se encontró capital asignado para el símbolo {symbol}.")
            return None

    # Validar que el atributo 'contract_size' exista
    contract_size = getattr(symbol_info, 'contract_size', 1)  # Usar 1 como valor por defecto si no existe
    if contract_size <= 0:
        print(f"Error: Tamaño del contrato inválido para {symbol}.")
        return None

    # Obtener el precio actual
    price = mt5.symbol_info_tick(symbol).ask if latest_signal == 'buy' else mt5.symbol_info_tick(symbol).bid
    if not price or price <= 0:
        print(f"Error: Precio inválido para el símbolo {symbol}.")
        return None

    # Calcular el tamaño del lote
    try:
        lot_size = (capital_assigned * (risk_per_trade / 100)) / (contract_size * price)
        lot_size = max(min(round(lot_size / symbol_info.volume_step) * symbol_info.volume_step, symbol_info.volume_max), symbol_info.volume_min)
    except (ZeroDivisionError, AttributeError) as e:
        print(f"Error al calcular el tamaño del lote: {e}")
        return None

    # Crear solicitud de orden
    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": symbol,
        "volume": lot_size,
        "type": order_type,
        "price": price,
        "deviation": 2,
        "magic": 234002,
        "comment": "Estrategia scalping",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }

    # Enviar orden
    result = mt5.order_send(request)
    if result.retcode != mt5.TRADE_RETCODE_DONE:
        print(f"Error al ejecutar la operación: {result.retcode}")
        return None

    print(f"Operación {latest_signal} ejecutada correctamente. Ticket: {result.order}")
    return result.order

import MetaTrader5 as mt5







def execute_trade_multiple(latest_signals, symbols, capital_assigned, risk_per_trade=0.5):
    """
    Ejecuta operaciones en múltiples símbolos asegurándose de que cada símbolo tenga una sola operación activa.
    
    :param latest_signals: Diccionario con las señales más recientes para cada símbolo.
    :param symbols: Lista de símbolos para operar.
    :param capital_assigned: Diccionario con la distribución de capital para cada símbolo.
    :param risk_per_trade: Porcentaje del capital a arriesgar en cada operación.
    :return: Lista con los resultados de las operaciones.
    """
    if not isinstance(latest_signals, dict):
        raise ValueError("El parámetro 'latest_signals' debe ser un diccionario.")

    results = []

    # Iterar solo sobre los símbolos con señales válidas
    for symbol, signal in latest_signals.items():
        try:
            # Verificar si hay una operación activa para el símbolo
            positions = mt5.positions_get(symbol=symbol)
            if positions and len(positions) > 0:
                logging.info(f"El símbolo {symbol} ya tiene una operación activa. Esperando para abrir otra.")
                continue

            # Obtener el capital asignado al símbolo actual
            symbol_capital = capital_assigned.get(symbol, 0)
            if symbol_capital <= 0:
                logging.warning(f"El capital asignado para el símbolo {symbol} es insuficiente.")
                continue

            # Validar la información del símbolo
            symbol_info = mt5.symbol_info(symbol)
            if not symbol_info:
                logging.error(f"No se pudo obtener información para el símbolo {symbol}.")
                continue

            # Obtener el precio actual
            tick_info = mt5.symbol_info_tick(symbol)
            if not tick_info:
                logging.error(f"No se pudo obtener información del precio para {symbol}.")
                continue

            price = tick_info.ask if signal == 'buy' else tick_info.bid
            tp_percentage = 0.0001  # Porcentaje de TP (0.1% del precio actual)
            tp = price * (1 + tp_percentage) if signal == 'buy' else price * (1 - tp_percentage)
            tp = round(tp, symbol_info.digits)

            # Calcular tamaño del lote
            risk_amount = symbol_capital * (risk_per_trade / 100)
            lot_size = risk_amount / price

            # Ajustar el tamaño del lote para cumplir con las restricciones del bróker
            lot_size = max(
                symbol_info.volume_min,
                min(round(lot_size / symbol_info.volume_step) * symbol_info.volume_step, symbol_info.volume_max)
            )

            # Preparar la operación
            action_type = mt5.ORDER_TYPE_BUY if signal == 'buy' else mt5.ORDER_TYPE_SELL
            order_request = {
                "action": mt5.TRADE_ACTION_DEAL,
                "symbol": symbol,
                "volume": lot_size,
                "type": action_type,
                "price": price,
                "tp": tp,
                "deviation": 2,
                "magic": 123456,
                "comment": "Scalping Trade",
            }

            # Ejecutar la operación
            result = mt5.order_send(order_request)
            if result.retcode == mt5.TRADE_RETCODE_DONE:
                logging.info(f"Operación realizada: {symbol}, Acción: {signal}, Volumen: {lot_size}, TP: {tp}")
                results.append(result)
            else:
                logging.error(f"Error al ejecutar operación en {symbol}: {result.comment}")

        except Exception as e:
            logging.error(f"Error procesando el símbolo {symbol}: {e}")

    return results









from datetime import datetime, timedelta
import MetaTrader5 as mt5
import time

from datetime import datetime, timedelta
import MetaTrader5 as mt5
import time

def obtener_beneficio_total():
    """Obtiene el beneficio total de operaciones cerradas y calcula el tiempo que tardaron en cerrarse."""
    if not mt5.initialize():
        print("Error al inicializar MetaTrader 5:", mt5.last_error())
        return

    from_time = datetime.now() - timedelta(minutes=10)
    to_time = datetime.now()

    deals = mt5.history_deals_get(from_time, to_time)
    if not deals:
        print("No hay operaciones en el historial dentro del rango especificado.")
        print("Error:", mt5.last_error())
        
        return

    resultados = []
    fecha_hora_actual = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    resultados.append(f"\n--- BLOQUE DE RESULTADOS: {fecha_hora_actual} ---\n\n")
    beneficio_total = 0

    for deal in deals:
        time_open = datetime.fromtimestamp(deal.time).strftime("%H:%M")
        formatted_profit = "{:,.2f}".format(deal.profit).replace(",", "X").replace(".", ",").replace("X", ".")
        ganancia_o_perdida = "GANANCIA" if deal.profit > 0 else "PÉRDIDA"
        resultados.append(f"{time_open} - Ticket: {deal.ticket}, Profit: {formatted_profit} ({ganancia_o_perdida}), "
                          f"Símbolo: {deal.symbol}, Tipo: {deal.type}, Volumen: {deal.volume}\n")

    operaciones_cerradas = [deal for deal in deals if deal.type in (0, 1)]

    for deal in operaciones_cerradas:
        beneficio_total += deal.profit
        time_open = datetime.fromtimestamp(deal.time)
        time_open_str = time_open.strftime("%H:%M")

        if hasattr(deal, 'time_msc') and isinstance(deal.time_msc, int) and deal.time_msc > 0:
            try:
                time_close = datetime.fromtimestamp(deal.time_msc / 1000.0)
            except (OSError, ValueError) as e:
                resultados.append(f"Error al convertir 'time_msc' para el ticket {deal.ticket}: {e}\n")
                time_close = time_open
        else:
            time_close = time_open

        tiempo_cierre = (time_close - time_open).total_seconds()
        formatted_profit = "{:,.2f}".format(deal.profit).replace(",", "X").replace(".", ",").replace("X", ".")
        ganancia_o_perdida = "GANANCIA" if deal.profit > 0 else "PÉRDIDA"
        resultados.append(f"{time_open_str} - Ticket: {deal.ticket}, Beneficio: {formatted_profit} ({ganancia_o_perdida}), "
                          f"Símbolo: {deal.symbol}, Tipo: {deal.type}, Tiempo para cerrar: {tiempo_cierre:.2f} segundos\n")

    formatted_benefit_total = "{:,.2f}".format(beneficio_total).replace(",", "X").replace(".", ",").replace("X", ".")
    ganancia_o_perdida_total = "GANANCIA" if beneficio_total > 0 else "PÉRDIDA"
    resultados.append(f"\nBeneficio total acumulado: {formatted_benefit_total} ({ganancia_o_perdida_total})\n")

    account_info = mt5.account_info()
    if account_info:
        formatted_balance = "{:,.2f}".format(account_info.balance).replace(",", "X").replace(".", ",").replace("X", ".")
        formatted_margin_free = "{:,.2f}".format(account_info.margin_free).replace(",", "X").replace(".", ",").replace("X", ".")
        resultados.append(f"Balance: {formatted_balance}, Margen libre: {formatted_margin_free}\n")

   

    # Esperar 24 segundos
    time.sleep(24)

    # Guardar resultados en un archivo de texto con bloques
    with open("resultados_operaciones.txt", "a", encoding="utf-8") as archivo:
        archivo.writelines(resultados)

    print("Los resultados se han archivado en 'resultados_operaciones.txt'.")
    


   







import logging
import time
import MetaTrader5 as mt5

import MetaTrader5 as mt5
import pandas as pd
import logging
import time

# Función principal
def main():
    """Función principal."""
    # Configuración de logging
    logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
    
    if not connect_to_mt5():
        logging.error("No se pudo conectar a MetaTrader 5.")
        return

    # Obtener el equity de la cuenta
    equity = get_account_equity()
    if equity is None:
        logging.error("No se puede continuar sin conocer el capital de la cuenta.")
        mt5.shutdown()
        return
    logging.info(f"Equity actual de la cuenta: {equity}")

    # Obtener el margen libre (free_margin)
    account_info = mt5.account_info()
    if account_info is None:
        logging.error("No se pudo obtener la información de la cuenta.")
        mt5.shutdown()
        return
    
    free_margin = account_info.margin_free
    logging.info(f"Margen libre disponible: {free_margin}")

    # Calcular la distribución de capital
    symbols = [
        "EURUSDm", "GBPUSDm", "AUDUSDm", "USDJPYm",
        "USDCADm", "USDMXNm", "USDZARm", "XAUUSDm",
        "BTCUSDm", "EURZARm"
    ]
    timeframe = mt5.TIMEFRAME_M1
    capital_assigned = calculate_risk_and_capital_distribution(symbols, free_margin)
    if capital_assigned is None:
        logging.error("No se pudo calcular la distribución del capital.")
        mt5.shutdown()
        return

    try:
        while True:
            # Crear un diccionario para almacenar las señales de todos los símbolos
            latest_signals = {}

            for symbol in symbols:
                # Obtener datos de mercado
                df = fetch_market_data(symbol, timeframe)
                if df is None or df.empty:
                    logging.warning(f"No se pudo obtener datos de mercado para {symbol}.")
                    continue

                # Calcular indicadores
                df = calculate_indicators(df)

                # Generar señal para el símbolo actual
                latest_signal = generate_signal(symbol, timeframe, limit=len(df))
                if latest_signal:
                    latest_signals[symbol] = latest_signal

            # Filtrar las señales válidas (solo 'buy' y 'sell')
            valid_signals = {symbol: signal for symbol, signal in latest_signals.items() if signal in ['buy', 'sell']}

            # Ejecutar operaciones para todos los símbolos con señales válidas
            if valid_signals:
                execute_trade_multiple(valid_signals, list(valid_signals.keys()), capital_assigned, risk_per_trade=0.5)

            # Mostrar ganancias/pérdidas de las operaciones
            obtener_beneficio_total()

            # Actualizar el equity de la cuenta en cada iteración
            equity = get_account_equity()
            if equity is None:
                logging.error("No se pudo actualizar el equity de la cuenta. Terminando ejecución.")
                break           
            logging.info(f"Equity actualizado: {equity}")

            # Esperar antes de repetir el ciclo
            time.sleep(5)

    except KeyboardInterrupt:
        logging.info("Ejecución interrumpida por el usuario.")
    except Exception as e:
        logging.error(f"Ocurrió un error inesperado: {e}")
    finally:
        # Cerrar conexión
        mt5.shutdown()

# Punto de entrada
if __name__ == "__main__":
    main()
