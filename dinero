import MetaTrader5 as mt5
import time

def reconnect_to_mt5():
    """
    Intenta reconectar a MT5 en caso de desconexión.
    """
    mt5.shutdown()
    time.sleep(5)
    if not mt5.initialize():
        return False
    return True

def close_open_positions(symbol, tp_percentage=1.5, sl_percentage=1.0, trailing_distance=0.5):
    """
    Modifica SL y TP dinámicamente o cierra posiciones abiertas para un símbolo.
    Incluye un trailing stop y maneja reconexiones.
    Ajusta automáticamente el trailing_distance al mínimo permitido por el broker si es demasiado pequeño.
    """
    if not mt5.initialize():
        print("MetaTrader 5 no pudo inicializarse.")
        return

    while True:
        # Verificar la conexión
        terminal_info = mt5.terminal_info()
        if not terminal_info or not terminal_info.connected:
            if not reconnect_to_mt5():
                print("No se pudo reconectar a MT5.")
                return

        positions = mt5.positions_get(symbol=symbol)
        if not positions:
            break

        symbol_info = mt5.symbol_info(symbol)
        if not symbol_info:
            print(f"Error: No se pudo obtener información del símbolo {symbol}.")
            return

        # Obtener la distancia mínima permitida por el broker
        stop_level = symbol_info.trade_stops_level * symbol_info.point

        for pos in positions:
            current_price = mt5.symbol_info_tick(symbol).ask if pos.type == mt5.ORDER_TYPE_BUY else mt5.symbol_info_tick(symbol).bid

            # Calcular el SL estático basado en sl_percentage
            sl_static = (
                current_price * (1 - sl_percentage / 100) if pos.type == mt5.ORDER_TYPE_BUY
                else current_price * (1 + sl_percentage / 100)
            )

            # Ajustar la distancia del trailing stop al mínimo permitido
            adjusted_trailing_distance = max(trailing_distance / 100 * current_price, stop_level)
            trailing_sl = (
                max(pos.price_open, current_price) - adjusted_trailing_distance if pos.type == mt5.ORDER_TYPE_BUY
                else min(pos.price_open, current_price) + adjusted_trailing_distance
            )

            # Seleccionar el SL final
            final_sl = (
                max(sl_static, trailing_sl) if pos.type == mt5.ORDER_TYPE_BUY
                else min(sl_static, trailing_sl)
            )

            # Calcular el nuevo Take Profit (TP)
            new_tp = (
                current_price * (1 + tp_percentage / 100) if pos.type == mt5.ORDER_TYPE_BUY
                else current_price * (1 - tp_percentage / 100)
            )

            # Redondear SL y TP a la cantidad de dígitos permitidos por el símbolo
            final_sl = round(final_sl, symbol_info.digits)
            new_tp = round(new_tp, symbol_info.digits)

            # Verificar restricciones del broker
            if abs(current_price - final_sl) < stop_level:
                print(f"SL rechazado para posición {pos.ticket}: Distancia mínima no cumplida ({stop_level}).")
                continue

            if abs(new_tp - current_price) < stop_level:
                print(f"TP rechazado para posición {pos.ticket}: Distancia mínima no cumplida ({stop_level}).")
                continue

            # Crear la solicitud de modificación
            modify_request = {
                "action": mt5.TRADE_ACTION_SLTP,
                "symbol": symbol,
                "position": pos.ticket,
                "sl": final_sl,
                "tp": new_tp,
            }

            # Enviar la solicitud de modificación
            modify_result = mt5.order_send(modify_request)
            if modify_result.retcode != mt5.TRADE_RETCODE_DONE:
                print(f"Error modificando SL/TP para posición {pos.ticket}: {modify_result.retcode}")

            time.sleep(0.2)  # Reducir la saturación

    mt5.shutdown()
