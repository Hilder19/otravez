def show_trade_profit(ticket):
    """Muestra las ganancias o pérdidas de la operación recién ejecutada."""
    posiciones = mt5.positions_get()
    if posiciones is None:
        logging.error(f"Error al obtener posiciones: {mt5.last_error()}")
        return

    resultados = [(pos.symbol, pos.profit) for pos in posiciones]

    for symbol, profit in resultados:
        logging.info(f"{symbol}: Ganancia/Pérdida: {profit:.2f}") 







GANACIAS Y PERDIDA 2


import MetaTrader5 as mt5
import logging
from colorama import Fore, Style

def show_trade_profit(ticket):
    """
    Muestra el resultado de la operación cerrada con un ticket específico.
    Indica si fue ganancia (chulito verde) o pérdida (x roja).
    """
    # Inicializar conexión con MetaTrader 5
    if not mt5.initialize():
        print("MetaTrader 5 no pudo inicializarse.")
        return

    # Obtener historial de operaciones cerradas
    deal = mt5.history_deals_get(ticket=ticket)
    if deal is None or len(deal) == 0:
        logging.error(f"No se encontró información para el ticket: {ticket}")
        mt5.shutdown()
        return

    # Procesar el resultado de la operación
    for d in deal:
        profit = d.profit
        if profit > 0:
            # Ganancia con chulito verde
            print(f"{Fore.GREEN}Ganancia ✔: {profit:.2f}{Style.RESET_ALL}")
        elif profit < 0:
            # Pérdida con x roja
            print(f"{Fore.RED}Pérdida ✘: {profit:.2f}{Style.RESET_ALL}")
        else:
            print(f"Sin ganancias ni pérdidas: {profit:.2f}")

    # Finalizar conexión con MetaTrader 5
    mt5.shutdown()











GANANCIA Y PERDIDA 3



import MetaTrader5 as mt5
import logging
from datetime import datetime, timedelta
from colorama import Fore, Style

def show_trade_profit(ticket):
    """
    Muestra el resultado de la operación cerrada con un ticket específico.
    Indica si fue ganancia (chulito verde) o pérdida (x roja).
    """
    # Inicializar conexión con MetaTrader 5
    if not mt5.initialize():
        print("MetaTrader 5 no pudo inicializarse.")
        return

    # Establecer rango de fechas amplio para el historial
    from_date = datetime.now() - timedelta(days=30)  # Últimos 30 días
    to_date = datetime.now()

    # Obtener historial de operaciones cerradas en el rango de fechas
    deals = mt5.history_deals_get(from_date, to_date)
    if deals is None:
        logging.error(f"No se pudo obtener el historial de operaciones: {mt5.last_error()}")
        mt5.shutdown()
        return

    # Filtrar la operación por ticket
    deal = next((d for d in deals if d.ticket == ticket), None)
    if deal is None:
        logging.error(f"No se encontró información para el ticket: {ticket}")
        mt5.shutdown()
        return

    # Mostrar el resultado de la operación
    profit = deal.profit
    if profit > 0:
        print(f"{Fore.GREEN}Ganancia ✔: {profit:.2f}{Style.RESET_ALL}")
    elif profit < 0:
        print(f"{Fore.RED}Pérdida ✘: {profit:.2f}{Style.RESET_ALL}")
    else:
        print(f"Sin ganancias ni pérdidas: {profit:.2f}")

    # Finalizar conexión con MetaTrader 5
    mt5.shutdown()











GANANCIA Y PERDIDA 4 


import MetaTrader5 as mt5
import logging
from colorama import Fore, Style
import time

def show_closed_trades_live(interval=1):
    """
    Monitorea continuamente las posiciones y muestra las ganancias o pérdidas
    de las operaciones que se cierran en el momento.

    Args:
        interval (int): Tiempo en segundos entre cada verificación de posiciones.
    """
    if not mt5.initialize():
        logging.error("No se pudo inicializar MetaTrader 5.")
        return

    previous_positions = {pos.ticket for pos in mt5.positions_get() or []}

    try:
        while True:
            # Obtener las posiciones actuales
            current_positions = {pos.ticket for pos in mt5.positions_get() or []}

            # Identificar las posiciones que se cerraron
            closed_positions = previous_positions - current_positions

            if closed_positions:
                for ticket in closed_positions:
                    deal = next((pos for pos in mt5.history_deals_get() if pos.ticket == ticket), None)
                    if deal:
                        symbol = deal.symbol
                        profit = deal.profit

                        if profit > 0:
                            print(f"{symbol}: {Fore.GREEN}GANANCIA = {profit:.2f} ✅{Style.RESET_ALL}")
                        elif profit < 0:
                            print(f"{symbol}: {Fore.RED}PERDIDA = {profit:.2f} ❌{Style.RESET_ALL}")
                        else:
                            print(f"{symbol}: SIN CAMBIOS = {profit:.2f}")

            # Actualizar las posiciones previas
            previous_positions = current_positions

            # Esperar el intervalo antes de la siguiente verificación
            time.sleep(interval)

    except KeyboardInterrupt:
        print("Monitoreo detenido por el usuario.")
    finally:
        mt5.shutdown()









GANANCIA Y PERDIDA 5 



import MetaTrader5 as mt5
import logging
from colorama import Fore, Style
import time
from datetime import datetime, timedelta

def show_closed_trades_live(interval=1):
    """
    Monitorea continuamente las posiciones y muestra las ganancias o pérdidas
    de las operaciones que se cierran en el momento.

    Args:
        interval (int): Tiempo en segundos entre cada verificación de posiciones.
    """
    if not mt5.initialize():
        logging.error("No se pudo inicializar MetaTrader 5.")
        return

    previous_positions = {pos.ticket for pos in mt5.positions_get() or []}

    try:
        while True:
            # Obtener las posiciones actuales
            current_positions = {pos.ticket for pos in mt5.positions_get() or []}

            # Identificar las posiciones que se cerraron
            closed_positions = previous_positions - current_positions

            if closed_positions:
                # Definir el rango de tiempo para consultar operaciones históricas
                now = datetime.now()
                start = now - timedelta(days=1)  # Consultar solo el último día
                deals = mt5.history_deals_get(start, now)

                if deals is None:
                    logging.error("No se pudieron obtener las operaciones históricas.")
                else:
                    for ticket in closed_positions:
                        # Buscar el deal correspondiente al ticket cerrado
                        deal = next((d for d in deals if d.ticket == ticket), None)
                        if deal:
                            symbol = deal.symbol
                            profit = deal.profit

                            # Mostrar solo el mensaje requerido
                            if profit > 0:
                                print(f"{symbol}: {Fore.GREEN}GANANCIA = {profit:.2f} ✅{Style.RESET_ALL}")
                            elif profit < 0:
                                print(f"{symbol}: {Fore.RED}PERDIDA = {profit:.2f} ❌{Style.RESET_ALL}")
                            else:
                                print(f"{symbol}: SIN CAMBIOS = {profit:.2f}")

            # Actualizar las posiciones previas
            previous_positions = current_positions

            # Esperar el intervalo antes de la siguiente verificación
            time.sleep(interval)

    except KeyboardInterrupt:
        print("Monitoreo detenido por el usuario.")
    finally:
        mt5.shutdown()






GANANCIA Y PERDIDA 6


import MetaTrader5 as mt5
import logging
from datetime import datetime, timedelta
from colorama import Fore, Style

def show_trade_profit(ticket):
    """
    Muestra las ganancias o pérdidas de la operación recién ejecutada.

    Args:
        ticket (int): El identificador del ticket de la operación que se cerró.
    """
    # Establecer el rango de tiempo (último minuto)
    now = datetime.now()
    start = now - timedelta(minutes=1)

    # Obtener las operaciones históricas en el rango de tiempo
    deals = mt5.history_deals_get(start, now)
    if deals is None:
        logging.error(f"Error al obtener operaciones históricas: {mt5.last_error()}")
        return

    # Buscar el deal correspondiente al ticket proporcionado
    deal = next((d for d in deals if d.ticket == ticket), None)
    if deal:
        # Extraer la información necesaria
        symbol = deal.symbol
        profit = deal.profit

        # Mostrar el resultado según sea ganancia o pérdida
        if profit > 0:
            print(f"{symbol}: {Fore.GREEN}GANANCIA = {profit:.2f} ✅{Style.RESET_ALL}")
        elif profit < 0:
            print(f"{symbol}: {Fore.RED}PERDIDA = {profit:.2f} ❌{Style.RESET_ALL}")
        else:
            print(f"{symbol}: SIN CAMBIOS = {profit:.2f}")
    else:
        logging.warning(f"No se encontró información para el ticket {ticket}.")










