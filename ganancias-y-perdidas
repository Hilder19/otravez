def show_trade_profit(ticket):
    """Muestra las ganancias o pérdidas de la operación recién ejecutada."""
    posiciones = mt5.positions_get()
    if posiciones is None:
        logging.error(f"Error al obtener posiciones: {mt5.last_error()}")
        return

    resultados = [(pos.symbol, pos.profit) for pos in posiciones]

    for symbol, profit in resultados:
        logging.info(f"{symbol}: Ganancia/Pérdida: {profit:.2f}") 







GANACIAS Y PERDIDA 2


import MetaTrader5 as mt5
import logging
from colorama import Fore, Style

def show_trade_profit(ticket):
    """
    Muestra el resultado de la operación cerrada con un ticket específico.
    Indica si fue ganancia (chulito verde) o pérdida (x roja).
    """
    # Inicializar conexión con MetaTrader 5
    if not mt5.initialize():
        print("MetaTrader 5 no pudo inicializarse.")
        return

    # Obtener historial de operaciones cerradas
    deal = mt5.history_deals_get(ticket=ticket)
    if deal is None or len(deal) == 0:
        logging.error(f"No se encontró información para el ticket: {ticket}")
        mt5.shutdown()
        return

    # Procesar el resultado de la operación
    for d in deal:
        profit = d.profit
        if profit > 0:
            # Ganancia con chulito verde
            print(f"{Fore.GREEN}Ganancia ✔: {profit:.2f}{Style.RESET_ALL}")
        elif profit < 0:
            # Pérdida con x roja
            print(f"{Fore.RED}Pérdida ✘: {profit:.2f}{Style.RESET_ALL}")
        else:
            print(f"Sin ganancias ni pérdidas: {profit:.2f}")

    # Finalizar conexión con MetaTrader 5
    mt5.shutdown()











GANANCIA Y PERDIDA 3



import MetaTrader5 as mt5
import logging
from datetime import datetime, timedelta
from colorama import Fore, Style

def show_trade_profit(ticket):
    """
    Muestra el resultado de la operación cerrada con un ticket específico.
    Indica si fue ganancia (chulito verde) o pérdida (x roja).
    """
    # Inicializar conexión con MetaTrader 5
    if not mt5.initialize():
        print("MetaTrader 5 no pudo inicializarse.")
        return

    # Establecer rango de fechas amplio para el historial
    from_date = datetime.now() - timedelta(days=30)  # Últimos 30 días
    to_date = datetime.now()

    # Obtener historial de operaciones cerradas en el rango de fechas
    deals = mt5.history_deals_get(from_date, to_date)
    if deals is None:
        logging.error(f"No se pudo obtener el historial de operaciones: {mt5.last_error()}")
        mt5.shutdown()
        return

    # Filtrar la operación por ticket
    deal = next((d for d in deals if d.ticket == ticket), None)
    if deal is None:
        logging.error(f"No se encontró información para el ticket: {ticket}")
        mt5.shutdown()
        return

    # Mostrar el resultado de la operación
    profit = deal.profit
    if profit > 0:
        print(f"{Fore.GREEN}Ganancia ✔: {profit:.2f}{Style.RESET_ALL}")
    elif profit < 0:
        print(f"{Fore.RED}Pérdida ✘: {profit:.2f}{Style.RESET_ALL}")
    else:
        print(f"Sin ganancias ni pérdidas: {profit:.2f}")

    # Finalizar conexión con MetaTrader 5
    mt5.shutdown()

