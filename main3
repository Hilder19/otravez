import MetaTrader5 as mt5
import pandas as pd
import time
import signal
import logging
from datetime import datetime
import getpass

# Configuración de logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')


def cerrar_conexion(sig, frame):
    """Manejador de la señal Ctrl + C para cerrar la conexión correctamente."""
    logging.info("\nCerrando conexión con MT5...")
    mt5.shutdown()  # Cerrar MT5 de manera segura
    logging.info("Conexión cerrada.")
    exit(0)  # Salir del programa


# Registrar el manejador de la señal Ctrl + C
signal.signal(signal.SIGINT, cerrar_conexion)


def connect_to_mt5():
    """Solicita credenciales al usuario y establece conexión con MetaTrader 5."""
    try:
        cuenta = int(input("Introduce tu número de cuenta: "))
        servidor = input("Introduce el nombre del servidor: ")
        contraseña = getpass.getpass("Introduce tu contraseña: ")  # Ocultar la contraseña
    except ValueError:
        logging.error("El número de cuenta debe ser un número entero.")
        return False

    # Inicializar MT5
    if not mt5.initialize():
        logging.error("Error al inicializar MT5: %s", mt5.last_error())
        return False

    # Iniciar sesión
    if not mt5.login(cuenta, password=contraseña, server=servidor):
        logging.error("Error al iniciar sesión: %s", mt5.last_error())
        mt5.shutdown()
        return False

    logging.info("Conexión exitosa a MT5.")
    return True


def get_account_equity():
    """Obtiene el capital de la cuenta."""
    account_info = mt5.account_info()
    if account_info is None:
        logging.error("No se pudo obtener la información de la cuenta.")
        return None
    return account_info.equity


def calculate_risk_and_capital_distribution(symbols):
    """
    Calcula el riesgo y distribuye el capital según el porcentaje definido por el usuario.
    """
    total_equity = get_account_equity()
    if total_equity is None:
        logging.error("No se pudo obtener el equity de la cuenta.")
        return None

    try:
        # Solicitar al usuario el porcentaje del capital para asignar
        risk_percentage = float(input("Introduce el porcentaje del capital para asignar a los símbolos (0-100): "))
        if not 0 <= risk_percentage <= 100:
            logging.error("El porcentaje debe estar entre 0 y 100.")
            return None
    except ValueError:
        logging.error("Por favor, introduce un número válido.")
        return None

    # Calcular el capital por cada símbolo
    number_of_symbols = len(symbols)
    if number_of_symbols == 0:
        logging.error("La lista de símbolos está vacía.")
        return None

    capital_per_symbol = (total_equity * risk_percentage / 100) / number_of_symbols
    logging.info(f"El capital asignado a cada símbolo será: {capital_per_symbol:.2f}")

    # Crear un diccionario con el capital para cada símbolo
    capital_distribution = {symbol: capital_per_symbol for symbol in symbols}
    return capital_distribution


def fetch_market_data(symbol, timeframe, limit=1):
    """Obtiene datos de mercado desde MT5."""
    rates = mt5.copy_rates_from_pos(symbol, timeframe, 0, limit)
    if rates is None:
        logging.error(f"Error al obtener datos para {symbol}: {mt5.last_error()}")
        return None

    df = pd.DataFrame(rates)
    df['time'] = pd.to_datetime(df['time'], unit='s')
    return df


def calculate_indicators(df):
    """Calcula indicadores técnicos como MACD, RSI, ADX y Bollinger Bands."""
    # MACD
    df['ema_fast'] = df['close'].ewm(span=12, adjust=False).mean()
    df['ema_slow'] = df['close'].ewm(span=26, adjust=False).mean()
    df['macd'] = df['ema_fast'] - df['ema_slow']
    df['macd_signal'] = df['macd'].ewm(span=9, adjust=False).mean()
    df['macd_diff'] = df['macd'] - df['macd_signal']

    # RSI
    delta = df['close'].diff()
    gain = delta.where(delta > 0, 0)
    loss = -delta.where(delta < 0, 0)
    avg_gain = gain.rolling(window=14).mean()
    avg_loss = loss.rolling(window=14).mean()
    rs = avg_gain / avg_loss
    df['rsi'] = 100 - (100 / (1 + rs))

    # Bollinger Bands
    df['sma'] = df['close'].rolling(window=20).mean()
    df['std'] = df['close'].rolling(window=20).std()
    df['upper_band'] = df['sma'] + (df['std'] * 2)
    df['lower_band'] = df['sma'] - (df['std'] * 2)

    df.fillna(0, inplace=True)
    return df


def generate_signal(row):
    """Genera señales de compra o venta basadas en indicadores."""
    buy_conditions = row['macd_diff'] > 0 and row['rsi'] < 30
    sell_conditions = row['macd_diff'] < 0 and row['rsi'] > 70

    if buy_conditions:
        return 'buy'
    elif sell_conditions:
        return 'sell'
    return 'hold'


def execute_trade(latest_signal, symbol, capital_assigned, risk_per_trade=1.0):
    """
    Ejecuta operaciones en MT5 y calcula el volumen del lote basado en el capital asignado.
    """
    order_type = mt5.ORDER_BUY if latest_signal == 'buy' else mt5.ORDER_SELL
    symbol_info = mt5.symbol_info(symbol)

    if not symbol_info:
        logging.error(f"No se encontró información para el símbolo {symbol}.")
        return None

    price = mt5.symbol_info_tick(symbol).ask if latest_signal == 'buy' else mt5.symbol_info_tick(symbol).bid
    lot_size = (capital_assigned * (risk_per_trade / 100)) / (symbol_info.contract_size * price)
    lot_size = max(symbol_info.volume_min, min(lot_size, symbol_info.volume_max))
    lot_size = round(lot_size / symbol_info.volume_step) * symbol_info.volume_step

    request = {
        "action": mt5.TRADE_ACTION_DEAL,
        "symbol": symbol,
        "volume": lot_size,
        "type": order_type,
        "price": price,
        "deviation": 20,
        "magic": 234000,
        "comment": "Robot de trading",
        "type_time": mt5.ORDER_TIME_GTC,
        "type_filling": mt5.ORDER_FILLING_IOC,
    }

    result = mt5.order_send(request)

    if result.retcode != mt5.TRADE_RETCODE_DONE:
        logging.error(f"Error al ejecutar la operación: {result.retcode}")
        return None

    logging.info(f"Operación {latest_signal} ejecutada correctamente.")
    return result.order


def show_trade_profit(ticket):
    """Muestra las ganancias o pérdidas de la operación recién ejecutada."""
    posiciones = mt5.positions_get()
    if posiciones is None:
        logging.error(f"Error al obtener posiciones: {mt5.last_error()}")
        return

    resultados = [(pos.symbol, pos.profit) for pos in posiciones]

    for symbol, profit in resultados:
        logging.info(f"{symbol}: Ganancia/Pérdida: {profit:.2f}")


def main():
    """Función principal."""
    if not connect_to_mt5():
        return

    symbols = ["USDMXN"]
    timeframe = mt5.TIMEFRAME_M1
    capital_assigned = calculate_risk_and_capital_distribution(symbols)
    if capital_assigned is None:
        return

    while True:
        for symbol in symbols:
            # Obtener datos de mercado
            df = fetch_market_data(symbol, timeframe)
            if df is None:
                continue

            # Calcular indicadores
            df = calculate_indicators(df)
            df['signal'] = df.apply(generate_signal, axis=1)

            # Generar la última señal
            latest_signal = df['signal'].iloc[-1]

            # Ejecutar operación si hay una señal válida
            if latest_signal in ['buy', 'sell']:
                # Usar el capital asignado al símbolo actual
                ticket = execute_trade(latest_signal, symbol, capital_assigned[symbol], risk_per_trade=1.0)

                if ticket:
                    # Mostrar ganancias/pérdidas de la operación
                    show_trade_profit(ticket)

        # Esperar antes de repetir el ciclo
        time.sleep(60)
